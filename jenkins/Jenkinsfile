pipeline {
	agent any

	stages {
		stage('Execute Unit Tests') {
			parallel {
				stage('Unit Tests Backend') {
					agent {
						docker {
							image 'snakee/golang-junit:1.21'
							reuseNode true
						}
					}
					environment {
						XDG_CACHE_HOME = '/tmp/.cache'
						GOMODCACHE = '/tmp/go-mod-cache'
					}
					steps {
						dir('bugtracker-backend') {
							sh '''
							  go test -v ./... 2>&1 | go-junit-report > test-results.xml || true

							  # Generate coverage report
							  go test -coverprofile=coverage.out -covermode=atomic ./...
							  go tool cover -html=coverage.out -o coverage.html

							  mkdir -p reports
							  mv coverage.html reports/
							'''
						}
					}
					post {
						always {
							junit 'bugtracker-backend/test-results.xml'
							publishHTML(target: [
								reportDir: 'bugtracker-backend/reports',
								reportFiles: 'coverage.html',
								reportName: 'Backend Code Coverage Report'
							])
						}
					}
				}

				stage('Unit Tests - Frontend') {
					agent {
						docker {
							image 'node:20-alpine'
							reuseNode true
						}
					}
					steps {
						dir('bugtracker-frontend') {
							sh '''
								npm ci
								npm test
								mkdir -p reports
								rm -rf reports/coverage
								mv coverage reports/
							'''
						}
					}
					post {
						always {
							junit 'bugtracker-frontend/test-results.xml'
                            publishHTML target: [
                                allowMissing: true,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
								reportDir: 'bugtracker-frontend/reports/coverage',
								reportFiles: 'index.html',
                                reportName: 'Frontend Coverage Report'
                            ]
						}
					}
				}
			}
		}
		stage('Launch Application') {
			agent {
				docker {
					image 'docker:27.5.1'
					args '-v /var/run/docker.sock:/var/run/docker.sock -u 0'
					reuseNode true
				}
			}
			steps {
				sh 'docker-compose up -d --build'
			}
		}
		stage('API Tests') {
			agent {
				docker {
					image 'mcr.microsoft.com/playwright:v1.35.0-jammy'
					args '-u 0 --network=host'
					reuseNode true
				}
			}
			steps {
				dir('tests-api') {
					sh 'npx wait-port http://localhost:8000/api/health -t=30000 '
					sh 'npm ci'
					sh 'npx playwright test'
				}
			}
			post {
				always {
					junit 'tests-api/test-results/results.xml'
					publishHTML target: [
						reportDir: 'tests-api/playwright-report',
						reportFiles: 'index.html',
						reportName: 'API Test HTML Report'
					]
				}
			}
		}
		stage('E2E Tests'){
			agent {
				docker {
					image 'mcr.microsoft.com/playwright:v1.35.0-jammy'
					args '-u 0 --network=host'
					reuseNode true
				}
			}
			steps {
				dir('tests-e2e') {
					sh 'npx wait-port http://localhost:3000 -t=30000 '
					sh 'npm ci'
					sh 'npx playwright test'
				}
			}
			post {
				always {
					junit 'tests-e2e/test-results/results.xml'
					publishHTML target: [
						reportDir: 'tests-e2e/playwright-report',
						reportFiles: 'index.html',
						reportName: 'E2E Test HTML Report'
					]
				}
			}
		}
	}
	post {
		always {
			cleanWs()
		}
	}
}